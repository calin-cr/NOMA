%% rxLog.m
% Convenience script to capture multiple scenarios for the two-user NOMA
% experiment. Configure the transmitter with
% runPlutoradioQPSKTransmitter/plutoradioqpsktransmitter_init beforehand,
% then run this script to gather both the "near" and "far" user datasets.

clearvars;

%% Shared parameters (adjust to match the transmitter configuration)
Rsym   = 1e6;        % Symbol rate (Hz)
modOrd = 4;          % QPSK
fc     = 2.45e9;     % Center frequency (Hz)
rolloff = 0.35;      % RRC roll-off
verboseDiagnostics = false; % Set true to print per-frame metrics
captureDuration = 5; % Seconds of data to log per scenario
plutoAddress = 'usb:0';

% Optional results log for quick BER comparisons
resultsFile = fullfile(pwd, 'experiment_results.mat');

% Transmit metadata log generated by runPlutoradioQPSKTransmitter
transmitLogFile = fullfile(pwd, 'noma_tx_log.mat');

% Scenarios to capture. Add/remove entries to extend the experiment.
scenarios = [
    struct('Name', 'near', 'Gain', 30, 'CaptureFile', fullfile(pwd, 'nearuser.mat')),
    struct('Name', 'far',  'Gain', 10, 'CaptureFile', fullfile(pwd, 'faruser.mat'))
    ];

%% Load the power allocation from the transmit log when available
powerAllocation = [];
if exist(transmitLogFile, 'file')
    txLog = load(transmitLogFile, 'nomaLog');
    if isfield(txLog, 'nomaLog') && isfield(txLog.nomaLog, 'PowerAllocation')
        powerAllocation = txLog.nomaLog.PowerAllocation(:).';
    end
end

%% Iterate through each scenario and record a capture
for idx = 1:numel(scenarios)
    scenario = scenarios(idx);

    % Build the receiver configuration for this scenario
    prmQPSKReceiver = plutoradioqpskreceiver_init(Rsym, modOrd, fc, ...
        scenario.Gain, rolloff, verboseDiagnostics);
    prmQPSKReceiver.Address = plutoAddress;
    prmQPSKReceiver.StopTime = captureDuration;
    prmQPSKReceiver.LogCaptures = true;
    prmQPSKReceiver.CaptureFilename = scenario.CaptureFile;
    prmQPSKReceiver.CaptureScenario = scenario.Name;
    prmQPSKReceiver.EnablePreview = true;
    if ~isempty(powerAllocation)
        prmQPSKReceiver.PowerAllocation = powerAllocation;
    end

    fprintf('Starting %s-user capture (logging to %s)\n', scenario.Name, ...
        scenario.CaptureFile);

    printReceivedData = false;
    try
        BER = runPlutoradioQPSKReceiver(prmQPSKReceiver, printReceivedData, idx);
    catch ME
        if strcmp(ME.identifier, 'runPlutoradioQPSKReceiver:PlutoUnavailable')
            warning(['Skipping %s-user capture because the Pluto SDR ', ...
                'support libraries are unavailable. %s\n'], ...
                scenario.Name, ME.message);
            continue;
        end
        rethrow(ME);
    end

    fprintf('%s-user capture complete. BER: %g (errors: %d over %d bits)\n', ...
        scenario.Name, BER(1), BER(2), BER(3));

    % Append BER stats to the experiment log for reference
    if ~isempty(resultsFile)
        logResults(resultsFile, Rsym, modOrd, fc, scenario.Gain, BER);
    end
end
